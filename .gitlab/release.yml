# Upload to PyPI. For external releases with KitMaker, we need to check compliance and use jfrog cli
build-and-upload-wheels:
  variables:
    GIT_DEPTH: 1000 # For correct version naming (e.g. 0.1.dev20) of nightly builds
  stage: release
  timeout: 15m
  tags: [type/docker, os/linux] # Use a runner with these tags
  rules:
    - if: $JET_ONLY != null
      when: never
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
      variables:
        RELEASE: "true"
        TWINE_USERNAME: svc-dl-algo-ammo
        TWINE_PASSWORD: $ARTIFACTORY_TOKEN # Configured in GitLab > Settings > CI/CD
        REPO_URL: https://urm.nvidia.com/artifactory/api/pypi/sw-dl-algo-ammo-pypi-local
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        RELEASE: "false"
        TWINE_USERNAME: gitlab-ci-token
        TWINE_PASSWORD: $CI_JOB_TOKEN
        REPO_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
  script:
    - pip install tox
    - tox -e build-wheel
    # KitMaker compliance checker: https://gitlab-master.nvidia.com/dl/pypi/Wheel-CI-CD/
    # - |
    #   if [[ $RELEASE == "true" ]]; then
    #     curl -fsSL https://get.docker.com | sh
    #     docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    #     docker run --pull=always --rm --network=host \
    #       -e IGNORE_FAILED_PIP_INSTALL="1" \
    #       -e EXPECTED_PKG_LICENSE="Apache 2.0" \
    #       -e SKIPPED_SECURITY_RULES="" \
    #       -e ALLOWED_NOSEC_COUNT="0" \
    #       -v dist:/workspace/ \
    #       gitlab-master.nvidia.com:5005/dl/pypi/wheel-ci-cd:wheeltamer
    #   fi
    - |
      set -ex
      if [[ $RELEASE == "true" ]]; then
        curl -fL https://install-cli.jfrog.io | sh
        jf rt upload "dist/*.whl" sw-dl-algo-ammo-pypi-local/nvidia-modelopt/release/$CI_COMMIT_TAG/ \
          --url=https://urm.nvidia.com/artifactory --user=$TWINE_USERNAME --password=$TWINE_PASSWORD \
          --target-props="component_name=nvidia-modelopt;os=any;arch=any;version=$CI_COMMIT_TAG;branch=release;release_approver=kmorabia;release_status=ready" \
          --flat --detailed-summary
      else
        pip install twine
        twine upload --repository-url $REPO_URL dist/*.whl
      fi
  artifacts:
    paths:
      - dist/
